#include <iostream>
#include <queue>
#include <unordered_set>

using namespace std;

void fifoPageReplacement(int pages[], int n, int capacity) {
    unordered_set<int> s;          // To store the current pages in memory
    queue<int> indexes;            // To maintain the order of page arrivals
    int pageFaults = 0;

    for (int i = 0; i < n; i++) {
        // If the page is not in memory
        if (s.find(pages[i]) == s.end()) {
            // If the memory is full, remove the oldest page
            if (s.size() == capacity) {
                int oldest = indexes.front();
                indexes.pop();
                s.erase(oldest);
            }
            // Add the new page to memory
            s.insert(pages[i]);
            indexes.push(pages[i]);
            pageFaults++;
        }
        // Print the current memory state
        cout << "Step " << i + 1 << ": ";
        for (auto page : s) {
            cout << page << " ";
        }
        cout << endl;
    }

    cout << "Total Page Faults: " << pageFaults << endl;
}

int main() {
    int n, capacity;

    cout << "Enter the number of pages: ";
    cin >> n;

    int pages[n];
    cout << "Enter the sequence of page references:\n";
    for (int i = 0; i < n; i++) {
        cin >> pages[i];
    }

    cout << "Enter the memory capacity: ";
    cin >> capacity;

    fifoPageReplacement(pages, n, capacity);

    return 0;
}
